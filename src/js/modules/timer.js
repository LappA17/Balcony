const timer = (id, deadline) => { /*эта функция принимает два аргумента, во-первых в какую область мы будем этот таймер рендерить,
    тоесть это какой-то уникальный индификатор элемента на страницу, возможно селектор . Второй - дедлайн, до какого
    времени будет идти таймер */

    /* Напишим функцию что бы было на 8 дней, 7 часов, 5 минут, 3 секунды до конца акции. А 08 07 05 03 */
    const addZero = (num) => {
        if(num <= 9){/* Если число которое было переданное как аргумент будет меньше или равна 9 */
            return "0" + num; /* то вернется 0 + число которое пришло(например 3), будет 03 */
        } else {
            return num; // если число которое больше, то просто возвращаем само это число
        }
    }; /* И теперь мы подставляем вызов функцию и пропускам числа в update clocl(на будущее - мы эту фнукцию написали
        в самом конце но Ваня сказал что по правильному ее подставить вверх) */

    const getTimeRemaining = (endtime) => {/*это будет функция которая показывает сколько времени осталось до конца 
        акции. Передаем endtime хотя по факту это тоже что deadline */

        const t = Date.parse(endtime) - Date.parse(new Date()), /*переменная time - получаем разницу межде 
            тем временим которое мы передали в endtime как дедлайн и
        время которое у нас сейчас в текущий момент.
        Метод parse - принимает в себя строку с датой в определенном формате и обернет в кство мс с 1970 года
        Date.parse(new Date()) - наша текущая дата, при помощи объекта new Date получаем*/

              seconds = Math.floor((t/1000) % 60), /* Переводим мс в секунды, помни что t сейчас в мс. И если выполнить только эту опперацию, то
кство дедлайна на сайте будет только в секундах, но мне нужно сделать так что бы секунды показывало от 59 до 1 
% 60  - таким образом мы посчитаем кство минут котороу будет внутри времени t и унас вернется хвостик, который будет уменьшаться на секунды
каждый промежуток времени*/

              minutes = Math.floor((t/1000/60) % 60),/* t/1000 - получаем секунды, /60 получаем минуты которые
 содержаться в общем времени t и теперь я это значение в t разделю с остатком на 60*/

              hours = Math.floor((t/(1000 * 60 * 60)) % 24), /* t/(1000 * 60 * 60)) - общее кство часов которое содержаться в нашем времени,
и делим его на 24, так как в стуках 24 часа  */

              days = Math.floor((t/(1000 * 60 * 60 * 24))); /* так как это конечное значение, то мы уже без % (без деления), при 
умножение на 24 мы просто помчитаем кство дней которое у нас осталось */

    /*Теперь когда мы всё это посчитали, нам необходимо будет вернуть эти данные в объект. Просто передаем переменные в объект */
        return { 
        'total': t, //все время
        'days': days,
        'hours': hours,
        'minutes': minutes,
        'seconds': seconds
        };
    };

    /* Теперь функция которая определенные значения помещает в определенные элементы на странице */
    const setClock = (selector, endtime) => { /*обрати внимание что endtime повторяется  */
        const timer = document.querySelector(selector), 
        /* Открываем верстку и видим что каждый отдельный элемент имеет уникальный индификатор (дни = days, 
        часы = hours и тд) */
              days = timer.querySelector("#days"),
              hours = timer.querySelector("#hours"),
              minutes = timer.querySelector("#minutes"),
              seconds = timer.querySelector("#seconds"),
              timeInterval = setInterval(updateClock, 1000); /* самая важная переменная, потому что нам нужно запустить
               сетинтервал, который будет каждую секунду обновлять наш таймер
              и что бы этот таймер когда-то остановить нам пондобиться уникальный индификатор этого таймера
              setInterval нужно передать функцию которая будет выполнятся и время через каждый промежуток которого оно будет выполняться(тоесть наш
                таймер будет обновляться каждую секунду, что логично)*/
        updateClock();/* вызывае вручную, до того как она запуститься при помощи сетинтервала(потому что там таймер через 1 секунлу)
 что бы пользователь при перезагрузке страницы не видел таймер который был изначально на верстке, это минибаг */

        /* эта функция будет определять сколько времени у нас осталось до дедлайна */
        function updateClock() {
            const t = getTimeRemaining(endtime);
            /* мы вызываем эту функцию для того что бы узнать сколько времени у нас осталось до конца, причем эта функция нам возвращает
            объект со всеми данными(дни, часы и тд, тот объект return) 
            Во внутрь передаем endtime(дедлайн), этот дедлайн нам прийдет в setClock*/

            days.textContent = addZero(t.days); /* То-есть мы редактируем значение текстом, значением которое нам возвращаем из getTimeRemaining */
            hours.textContent = addZero(t.hours);
            minutes.textContent = addZero(t.minutes);
            seconds.textContent = addZero(t.seconds);

            /* Теперь необходимо прописать условие для остановки нашего таймера */
            if (t.total <= 0) {
                days.textContent = "00";
                hours.textContent = "00";
                minutes.textContent = "00";
                seconds.textContent = "00";

                clearInterval(timeInterval); /* команда что бы остановить интервал. И передаем переменную где setInterval */
            }
        }     
    };
    /* ТЕПЕРЬ ОСТАЛОСЬ ТОЛЬКО ЗАПУСТИТЬ ЭТО ТАЙМЕР, А ИМЕННО ПЕРЕДАТЬ ПРАВИЛЬНЫЕ ЗНАЧЕНИЯ. ДВА АРГУМЕНТА: id , deadline и мы должны
    их передать в функцию setClock */
    setClock(id, deadline);
};
export default timer;